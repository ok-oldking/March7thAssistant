name: Sync Fork and Flatten Submodules

on:
  workflow_dispatch: # Manual trigger
    inputs:
      branch:
        description: 'Branch in this fork to sync (e.g., main, master)'
        required: true
        default: 'main'
      upstream_repo_url:
        description: 'Full URL of the parent/upstream repository'
        required: true
        default: 'https://github.com/moesnow/March7thAssistant'
      upstream_branch:
        description: 'Branch in the upstream repo to sync from (e.g., main, master). If empty, uses the fork branch name.'
        required: false
        default: 'main'
  schedule:
    - cron: '0 3 * * *'
  push:
    branches:
      - main

env:
  DEFAULT_BRANCH: 'main'
  DEFAULT_UPSTREAM_REPO_URL: 'https://github.com/moesnow/March7thAssistant'
  DEFAULT_UPSTREAM_BRANCH: 'main'

jobs:
  sync_and_process:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      workflows: write

    steps:
      - name: Determine Sync Parameters
        id: sync_params
        run: |
          _branch=""
          _upstream_repo_url=""
          _upstream_branch=""
          echo "Event name: ${{ github.event_name }}"
          echo "Ref name: ${{ github.ref_name }}"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            _branch="${{ github.event.inputs.branch }}"
            _upstream_repo_url="${{ github.event.inputs.upstream_repo_url }}"
            _upstream_branch="${{ github.event.inputs.upstream_branch || github.event.inputs.branch }}"
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            _branch="${{ env.DEFAULT_BRANCH }}"
            _upstream_repo_url="${{ env.DEFAULT_UPSTREAM_REPO_URL }}"
            _upstream_branch="${{ env.DEFAULT_UPSTREAM_BRANCH }}"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            if [[ "${{ github.ref_name }}" == "${{ env.DEFAULT_BRANCH }}" ]]; then
              _branch="${{ github.ref_name }}"
              _upstream_repo_url="${{ env.DEFAULT_UPSTREAM_REPO_URL }}"
              _upstream_branch="${{ env.DEFAULT_UPSTREAM_BRANCH }}"
            else
              echo "Push event to non-default branch (${{ github.ref_name }}). Workflow configured for ${{ env.DEFAULT_BRANCH }}. Skipping."
              exit 0
            fi
          else
            echo "::error::Unsupported event type: ${{ github.event_name }}"
            exit 1
          fi
          if [[ -z "$_branch" ]]; then echo "::error::Target branch is not defined."; exit 1; fi
          if [[ -z "$_upstream_repo_url" ]]; then echo "::error::Upstream repository URL is not defined."; exit 1; fi
          if [[ -z "$_upstream_branch" ]]; then echo "::error::Upstream branch is not defined."; exit 1; fi
          echo "BRANCH_TO_SYNC=$_branch" >> $GITHUB_OUTPUT
          echo "UPSTREAM_REPO_URL=$_upstream_repo_url" >> $GITHUB_OUTPUT
          echo "UPSTREAM_BRANCH=$_upstream_branch" >> $GITHUB_OUTPUT

      - name: Checkout Fork
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.sync_params.outputs.BRANCH_TO_SYNC }}
          fetch-depth: 0
          submodules: 'recursive'
          # token: ${{ secrets.YOUR_PAT_FOR_UPSTREAM }}

      - name: Configure Git User
        run: |
          git config --global user.name "GitHub Action Sync Bot"
          git config --global user.email "actions@github.com"

      - name: Add Upstream Remote
        run: |
          git remote add upstream ${{ steps.sync_params.outputs.UPSTREAM_REPO_URL }} || echo "Upstream remote already exists or failed to add."
          git remote -v

      - name: Fetch from Upstream (including all tags)
        run: |
          echo "Fetching all tags from upstream and forcing local update..."
          git fetch upstream --tags --force
          echo "Fetching upstream branch ${{ steps.sync_params.outputs.UPSTREAM_BRANCH }}..."
          git fetch upstream ${{ steps.sync_params.outputs.UPSTREAM_BRANCH }}

      - name: Merge Upstream (Prefer Upstream on Conflict)
        run: |
          BRANCH="${{ steps.sync_params.outputs.BRANCH_TO_SYNC }}"
          UPSTREAM_BRANCH="${{ steps.sync_params.outputs.UPSTREAM_BRANCH }}"
          echo "Merging upstream/${UPSTREAM_BRANCH} into ${BRANCH}..."
          git merge "upstream/${UPSTREAM_BRANCH}" -X theirs --no-ff --no-commit --allow-unrelated-histories
          echo "Merge command executed. Check for conflicts if any were not auto-resolved by -X theirs."

      - name: Flatten Submodules
        id: flatten_submodules
        run: |
          echo "Attempting to flatten submodules..."
          if [ ! -f ".gitmodules" ]; then
            echo "No .gitmodules file found. Skipping submodule flattening."
            echo "changes_made_in_flatten=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          SUBMODULE_PATHS=$(git config --file .gitmodules --get-regexp path | awk '{ print $2 }')
          if [ -z "$SUBMODULE_PATHS" ]; then
            echo "No submodule paths found in .gitmodules though file exists. Skipping."
            echo "changes_made_in_flatten=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "De-initializing submodules..."
          git submodule deinit --all -f
          for path in $SUBMODULE_PATHS; do
            echo "Removing .git directory from submodule at $path"
            if [ -d "$path/.git" ]; then
              rm -rf "$path/.git"
            elif [ -f "$path/.git" ]; then
              rm -f "$path/.git"
            fi
            echo "Staging content of former submodule at $path"
            git add "$path"
          done
          echo "Removing .gitmodules file..."
          git rm .gitmodules
          echo "Submodule flattening process completed."
          echo "changes_made_in_flatten=true" >> $GITHUB_OUTPUT

      - name: Commit Changes
        id: commit
        run: |
          if git diff --quiet --cached && git diff --quiet; then
            echo "No changes to commit after merge and submodule processing."
            echo "committed=false" >> $GITHUB_OUTPUT
          else
            git add -A
            if git diff --quiet --cached; then
                echo "No changes to commit even after 'git add -A'."
                echo "committed=false" >> $GITHUB_OUTPUT
            else
                git commit -m "Sync with upstream/${{ steps.sync_params.outputs.UPSTREAM_BRANCH }}, prefer upstream on conflict, flatten submodules"
                echo "Changes committed."
                echo "committed=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Push Branch Changes
        if: steps.commit.outputs.committed == 'true'
        run: |
          BRANCH="${{ steps.sync_params.outputs.BRANCH_TO_SYNC }}"
          echo "Pushing branch changes to origin/${BRANCH}..."
          git push origin "${BRANCH}"

      - name: No Branch Changes to Push
        if: steps.commit.outputs.committed == 'false'
        run: echo "No branch changes were committed, so no branch push is necessary."

      - name: Push Synced Tags to Fork
        # This step runs regardless of whether new commits were made to the branch,
        # because upstream might have new tags pointing to existing commits.
        # The 'Fetch from Upstream' step already updated local tags from upstream.
        run: |
          echo "Pushing all local tags (synced from upstream) to origin..."
          # This pushes all local tags to the 'origin' remote (your fork).
          # If a tag on 'origin' has the same name as a local tag (from upstream)
          # but points to a different commit, and the update is not a fast-forward,
          # the push for that specific tag might be rejected by the remote.
          # To force overwrite tags on your fork with the upstream versions, use:
          # git push origin --tags --force
          git push origin --tags