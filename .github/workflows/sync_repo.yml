name: Sync Fork and Flatten Submodules

on:
  workflow_dispatch: # Manual trigger
    inputs:
      branch:
        description: 'Branch in this fork to sync (e.g., main, master)'
        required: true
        default: 'main'
      upstream_repo_url:
        description: 'Full URL of the parent/upstream repository'
        required: true
        default: 'https://github.com/moesnow/March7thAssistant'
      upstream_branch:
        description: 'Branch in the upstream repo to sync from (e.g., main, master). If empty, uses the fork branch name.'
        required: false
        default: 'main'
  schedule:
    - cron: '0 3 * * *'
  push:
    branches:
      - main # Or your default branch

env:
  DEFAULT_BRANCH: 'main' # Adjust if your default branch is different
  DEFAULT_UPSTREAM_REPO_URL: 'https://github.com/moesnow/March7thAssistant'
  DEFAULT_UPSTREAM_BRANCH: 'main'

jobs:
  sync_and_process:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Determine Sync Parameters
        id: sync_params
        # ... (same as your original, no changes needed here) ...
        run: |
          _branch=""
          _upstream_repo_url=""
          _upstream_branch=""
          echo "Event name: ${{ github.event_name }}"
          echo "Ref name: ${{ github.ref_name }}"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            _branch="${{ github.event.inputs.branch }}"
            _upstream_repo_url="${{ github.event.inputs.upstream_repo_url }}"
            _upstream_branch="${{ github.event.inputs.upstream_branch || github.event.inputs.branch }}"
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            _branch="${{ env.DEFAULT_BRANCH }}"
            _upstream_repo_url="${{ env.DEFAULT_UPSTREAM_REPO_URL }}"
            _upstream_branch="${{ env.DEFAULT_UPSTREAM_BRANCH }}"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            if [[ "${{ github.ref_name }}" == "${{ env.DEFAULT_BRANCH }}" ]]; then
              _branch="${{ github.ref_name }}"
              _upstream_repo_url="${{ env.DEFAULT_UPSTREAM_REPO_URL }}"
              _upstream_branch="${{ env.DEFAULT_UPSTREAM_BRANCH }}"
            else
              echo "Push event to non-default branch (${{ github.ref_name }}). Workflow configured for ${{ env.DEFAULT_BRANCH }}. Skipping."
              exit 0
            fi
          else
            echo "::error::Unsupported event type: ${{ github.event_name }}"
            exit 1
          fi
          if [[ -z "$_branch" ]]; then echo "::error::Target branch is not defined."; exit 1; fi
          if [[ -z "$_upstream_repo_url" ]]; then echo "::error::Upstream repository URL is not defined."; exit 1; fi
          if [[ -z "$_upstream_branch" ]]; then echo "::error::Upstream branch is not defined."; exit 1; fi
          echo "BRANCH_TO_SYNC=$_branch" >> $GITHUB_OUTPUT
          echo "UPSTREAM_REPO_URL=$_upstream_repo_url" >> $GITHUB_OUTPUT
          echo "UPSTREAM_BRANCH=$_upstream_branch" >> $GITHUB_OUTPUT

      - name: Checkout Fork
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.WORKFLOW }}
          ref: ${{ steps.sync_params.outputs.BRANCH_TO_SYNC }}
          fetch-depth: 0
          submodules: false

      - name: Configure Git User
        run: |
          git config --global user.name "GitHub Action Sync Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add Upstream Remote
        run: |
          git remote add upstream ${{ steps.sync_params.outputs.UPSTREAM_REPO_URL }} || echo "Upstream remote already exists or failed to add."
          git remote -v

      - name: Fetch from Upstream
        run: |
          git fetch upstream --tags --force
          git fetch upstream ${{ steps.sync_params.outputs.UPSTREAM_BRANCH }}

      - name: Prepare Temporary Upstream Clone for Submodule Info & Content
        id: prep_upstream_clone
        run: |
          UPSTREAM_REPO_URL="${{ steps.sync_params.outputs.UPSTREAM_REPO_URL }}"
          UPSTREAM_BRANCH="${{ steps.sync_params.outputs.UPSTREAM_BRANCH }}"
          TEMP_UPSTREAM_DIR="upstream_temp_clone_for_submodules"
          echo "Cloning upstream ${UPSTREAM_REPO_URL} (branch ${UPSTREAM_BRANCH}) into ${TEMP_UPSTREAM_DIR}..."
          git clone --branch "${UPSTREAM_BRANCH}" --depth 1 "${UPSTREAM_REPO_URL}" "${TEMP_UPSTREAM_DIR}"
          cd "${TEMP_UPSTREAM_DIR}"
          if [ -f ".gitmodules" ]; then
            echo "Initializing submodules in temporary upstream clone (recursive, depth 1)..."
            git submodule update --init --recursive --depth 1
            echo "Submodules initialized in temporary clone."
            echo "submodules_present_in_temp_clone=true" >> $GITHUB_OUTPUT
          else
            echo "No .gitmodules file found in temporary upstream clone."
            echo "submodules_present_in_temp_clone=false" >> $GITHUB_OUTPUT
          fi
          echo "TEMP_UPSTREAM_CLONE_PATH=${GITHUB_WORKSPACE}/${TEMP_UPSTREAM_DIR}" >> $GITHUB_OUTPUT
          cd "${GITHUB_WORKSPACE}"

      - name: Pre-Clean Local Paths and Commit if Needed
        id: pre_clean
        run: |
          echo "Pre-cleaning local paths that might conflict with upstream submodules..."
          TEMP_UPSTREAM_CLONE_PATH="${{ steps.prep_upstream_clone.outputs.TEMP_UPSTREAM_CLONE_PATH }}"
          SUBMODULES_PRESENT_IN_TEMP_CLONE="${{ steps.prep_upstream_clone.outputs.submodules_present_in_temp_clone }}"
          
          # Stage 1: Use git rm --cached for tracked items, then rm -rf for working tree cleanup.
          if [[ "$SUBMODULES_PRESENT_IN_TEMP_CLONE" == "true" ]] && [[ -f "${TEMP_UPSTREAM_CLONE_PATH}/.gitmodules" ]]; then
            git -C "${TEMP_UPSTREAM_CLONE_PATH}" config --file .gitmodules --get-regexp path | awk '{ print $2 }' | while read -r submodule_path; do
              target_path_in_main_repo="./${submodule_path}"
              echo "Pre-cleaning path: $target_path_in_main_repo"
              # Remove from index if tracked (stages the removal)
              git rm -r --cached -f --ignore-unmatch "$target_path_in_main_repo" >/dev/null 2>&1
              # Ensure removal from working tree
              if [ -e "$target_path_in_main_repo" ]; then
                rm -rf "$target_path_in_main_repo"
              fi
            done
          else
            echo "No submodules found in temp upstream clone's .gitmodules to pre-clean."
          fi

          # Clean .gitmodules from the fork's index and working tree
          echo "Pre-cleaning .gitmodules file if present."
          git rm --cached -f --ignore-unmatch ".gitmodules" >/dev/null 2>&1
          if [ -f ".gitmodules" ]; then
            rm -f ".gitmodules"
          fi

          # Stage 2: Commit if any changes were staged by git rm --cached
          if ! git diff --quiet --cached; then
            echo "Staged changes detected from pre-cleaning. Committing them."
            git commit -m "BOT: Prepare for upstream sync by cleaning submodule paths"
            echo "pre_commit_made=true" >> $GITHUB_OUTPUT
          else
            echo "No staged changes from pre-cleaning. No pre-commit needed."
            echo "pre_commit_made=false" >> $GITHUB_OUTPUT
          fi

      - name: Merge Upstream (Prefer Upstream on Conflict)
        run: |
          BRANCH="${{ steps.sync_params.outputs.BRANCH_TO_SYNC }}"
          UPSTREAM_BRANCH="${{ steps.sync_params.outputs.UPSTREAM_BRANCH }}"
          echo "Merging upstream/${UPSTREAM_BRANCH} into ${BRANCH}..."
          git merge "upstream/${UPSTREAM_BRANCH}" -X theirs --no-ff --no-commit --allow-unrelated-histories
          echo "Merge command executed. Changes from merge are staged."

      - name: Flatten/Inline Submodules from Upstream Clone
        id: flatten_submodules
        run: |
          echo "Inlining submodules using content from temporary upstream clone..."
          changes_made_in_flatten=false # This will track if actual file content changes occur in this step
          TEMP_UPSTREAM_CLONE_PATH="${{ steps.prep_upstream_clone.outputs.TEMP_UPSTREAM_CLONE_PATH }}"
          SUBMODULES_PRESENT_IN_TEMP_CLONE="${{ steps.prep_upstream_clone.outputs.submodules_present_in_temp_clone }}"

          echo "De-initializing any submodule configurations that might have been merged in..."
          # This removes gitlinks from index (if staged by merge) and cleans submodule .git internal files
          git submodule deinit --all -f 

          # Remove .gitmodules file if it was staged by merge or still exists
          if git ls-files --error-unmatch .gitmodules >/dev/null 2>&1 || [ -f .gitmodules ]; then
            echo "Removing .gitmodules file from main repo (staged or working tree)..."
            git rm --cached -f --ignore-unmatch .gitmodules >/dev/null 2>&1 # from index if staged
            rm -f .gitmodules     # from worktree
            # If git rm did something, it's part of the changes to be committed.
          fi

          if [[ "$SUBMODULES_PRESENT_IN_TEMP_CLONE" != "true" ]]; then
            echo "Temporary upstream clone reported no .gitmodules or failed to initialize its submodules."
          elif [ ! -f "${TEMP_UPSTREAM_CLONE_PATH}/.gitmodules" ]; then
            echo "::warning:: SUBMODULES_PRESENT_IN_TEMP_CLONE was true, but ${TEMP_UPSTREAM_CLONE_PATH}/.gitmodules not found."
          else
            git -C "${TEMP_UPSTREAM_CLONE_PATH}" config --file .gitmodules --get-regexp path | awk '{ print $2 }' | while read -r submodule_path; do
              target_submodule_path_in_main_repo="./${submodule_path}"
              source_submodule_content_path="${TEMP_UPSTREAM_CLONE_PATH}/${submodule_path}"

              # Ensure target path is clean again (deinit might leave empty dirs)
              rm -rf "$target_submodule_path_in_main_repo"

              if [ -d "$source_submodule_content_path" ] && [ -n "$(ls -A "$source_submodule_content_path" 2>/dev/null)" ]; then
                echo "Copying content from ${source_submodule_content_path} to ${target_submodule_path_in_main_repo}..."
                mkdir -p "$(dirname "$target_submodule_path_in_main_repo")"
                rsync -a --delete --exclude='.git/' "${source_submodule_content_path}/" "${target_submodule_path_in_main_repo}/"
                echo "Staging content of former submodule at $target_submodule_path_in_main_repo"
                git add "$target_submodule_path_in_main_repo"
                changes_made_in_flatten=true # Indicates content was added/changed
              else
                echo "::warning:: Submodule content for '${submodule_path}' not found or empty at '${source_submodule_content_path}'."
              fi
            done
          fi
          echo "changes_made_in_flatten=$changes_made_in_flatten" >> $GITHUB_OUTPUT

      - name: Clean Up Temporary Upstream Clone
        if: always()
        run: |
          TEMP_UPSTREAM_CLONE_PATH="${{ steps.prep_upstream_clone.outputs.TEMP_UPSTREAM_CLONE_PATH }}"
          if [ -n "$TEMP_UPSTREAM_CLONE_PATH" ] && [ -d "$TEMP_UPSTREAM_CLONE_PATH" ]; then
            echo "Removing temporary upstream clone at ${TEMP_UPSTREAM_CLONE_PATH}..."
            rm -rf "$TEMP_UPSTREAM_CLONE_PATH"
          fi

      - name: Commit Final Changes
        id: final_commit
        run: |
          if ! git diff --name-only --diff-filter=U --quiet; then
            echo "::error::Unresolved merge conflicts detected before final commit!"
            git status --short
            exit 1
          fi

          COMMIT_MSG="BOT: Synced with upstream/${{ steps.sync_params.outputs.UPSTREAM_BRANCH }} (theirs) & inlined submodules"
          if [[ "${steps.pre_clean.outputs.pre_commit_made}" == "true" ]]; then
            # If a pre-commit was made, the current staged changes are just merge+flatten
            : # Keep default message
          elif [[ "$(git log -1 --pretty=%B)" == "BOT: Prepare for upstream sync by cleaning submodule paths" ]]; then
            # This case should not happen if pre_commit_made logic is correct, but as a safeguard.
            echo "Warning: Current HEAD is pre-clean commit, but pre_commit_made was false."
          fi
          
          # Check if there are any staged changes to commit.
          # This includes changes from merge AND flattening.
          if git diff --quiet --cached; then
            echo "No changes staged for final commit. This can happen if fork was already perfectly in sync."
            echo "committed=false" >> $GITHUB_OUTPUT
          else
            echo "Staging area has changes. Committing with message: '${COMMIT_MSG}'"
            git commit -m "${COMMIT_MSG}"
            echo "Changes committed."
            echo "committed=true" >> $GITHUB_OUTPUT
          fi

      - name: Push Branch Changes
        if: steps.final_commit.outputs.committed == 'true' || steps.pre_clean.outputs.pre_commit_made == 'true'
        run: |
          BRANCH="${{ steps.sync_params.outputs.BRANCH_TO_SYNC }}"
          echo "Pushing branch changes to origin/${BRANCH}..."
          git push origin "${BRANCH}"

      - name: No Branch Changes to Push
        if: steps.final_commit.outputs.committed == 'false' && steps.pre_clean.outputs.pre_commit_made == 'false'
        run: echo "No changes were committed (neither pre-clean nor final), so no branch push is necessary."

      - name: Push Synced Tags to Fork
        env:
          GH_TOKEN: ${{ secrets.WORKFLOW }}
        run: |
          echo "Pushing all local tags (synced from upstream) to origin..."
          git push origin --tags --force